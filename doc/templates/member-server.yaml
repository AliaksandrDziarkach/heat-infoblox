heat_template_version: 2014-10-16
description: An Infoblox Grid Member
parameters:
  mgmt_network:
    type: string
    description: the network for management
  lan1_network:
    type: string
    description: the network for serving protocols
  external_network:
    type: string
    description: the external network for floating IP allocations
    default: public
resources:
  host_name:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lowercase

# We pre-allocate the port for LAN1, so that we have the IP address already for
# injection via user_data
  lan1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: lan1_network }

# If the GM is outside the cloud, each member needs its own floating IP so that
# they are associated with separate NAT addresses.
# Even if the GM is in the cloud, you may need this if you want Ceilometer to
# poll the member for QPS.
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: lan1_port }

  grid_member:
    type: Infoblox::Grid::Member
    properties:
      name: { list_join: [ '.', [{ list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }, 'localdomain' ]] }
      model: IB-VM-810
# the MGMT interface configuration is not yet supported
      LAN1: { get_resource: lan1_port }
      dns: { enable: True }
      licenses: ["vnios", "dns", "enterprise"]
# If you do not have a license pool and want to use temp licenses instead,
# uncomment the line below
      #temp_licenses: ["vnios", "dns", "enterprise"]
      gm_ip: 10.2.0.7
# To get your GM certificate you can use the following command:
#   echo | openssl s_client -connect gm_ip_address:443 2>/dev/null | openssl x509
#
      gm_certificate: -----BEGIN CERTIFICATE----- MIIDdzCCAl8CEFL4Aa3IfYnJtw9Sgy/d2YowDQYJKoZIhvcNAQEFBQAwejELMAkG A1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcTCVN1bm55dmFs ZTERMA8GA1UEChMISW5mb2Jsb3gxFDASBgNVBAsTC0VuZ2luZWVyaW5nMRkwFwYD VQQDExB3d3cuaW5mb2Jsb3guY29tMB4XDTE1MDkyOTE4MzcxOFoXDTE2MDkyODE4 MzcxOFowejELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNV BAcTCVN1bm55dmFsZTERMA8GA1UEChMISW5mb2Jsb3gxFDASBgNVBAsTC0VuZ2lu ZWVyaW5nMRkwFwYDVQQDExB3d3cuaW5mb2Jsb3guY29tMIIBIjANBgkqhkiG9w0B AQEFAAOCAQ8AMIIBCgKCAQEAurYF4Yr428iIBu8fbCGzQHQqOK9HnxsrMe7/6d06 d0cjEjm15Q1UWG6ShaD1vmdfvIVspIJtemoqq7e2RtS4Ei/Q5AfoAZS7hg8EZ6c3 HUaxMvIDyQ2NHndnOO+RNfnYtowCNciKxGM8OHoVeZ7WOJ41XyXuarKYtUBB6/MM 5wD3ygmZzcgSFoTYnD/9VLULGMf3xJrfxIT1GlgowRE3rb+hKMrzRMgKTIWi3wPP jNClqHGKc9G5b2NncTvavhvssIx9RqVlLj51PwYopxiNo9uoGNRFEq0q61CO2eqA XnaBhD6xzHW7SP1ofuFIbJ44HDfnJGGd/mjdtwpCb8zeZQIDAQABMA0GCSqGSIb3 DQEBBQUAA4IBAQAWhusK3FxZW9ipE3yehOwMQguJg/8L8boUAd2jn/xXcJdkljoe OY//JJw4C03CnwItIluO1S8pilnxl1JgLnveKLEaVsCXP1O6/BzvIe+rgTRbvAcO eterd0KlO28L60dUf8fgURzyk4V/4H14me/AC+YOdv9vr6+XPilfTLbXW9EO4YWo rBpsDsMgG0IxHkbMRg4h7LmAobl4C74dBSNICasudHWIIc7XfJGBhrxzL1W7+e5b sza+B2Op6G3iRk+xysy/ZuoMz18hfmPkfdy19bCV+k0uuxwHJV9q3IkxrMexTT9t +oV55GjTBDko9uckdoDQRIzsoL2hv9eoPDlS -----END CERTIFICATE-----
# If your GM is outside the cloud, you must uncomment the line below so that
# the floating IP is configured in the GM for this member.
      #nat_ip: { get_attr: [ floating_ip, floating_ip_address ] }
      remote_console_enabled: true
      admin_password: infoblox

  grid_member_ns_group_entry:
    type: Infoblox::Grid::NameServerGroupMember
# Make sure it is created only after the member is created
    depends_on: grid_member
    properties:
# You need to define the group in the GM and list its name here.
      group_name: default
      member_role: grid_secondary
# The name: of the member_server must be the grid member name.
      member_server: { name: { list_join: [ '.', [{ list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }, 'localdomain' ]] } }

  server:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }
      flavor: vnios810.55
      image: nios-7.2.3-810-55.qcow2
# The mgmt IP is allocated by OpenStack but not configured in the GM. However,
# we need to list it here since LAN1 needs to be the second NIC
      networks: [{network: {get_param: mgmt_network} }, {port: { get_resource: lan1_port}} ]
      user_data_format: RAW
      user_data: { get_attr: [grid_member, user_data] }
      metadata: { nios: true }
outputs:
  member_service_address:
    value: { get_attr: [lan1_port, fixed_ips] }
  user_data:
    value: { get_attr: [grid_member, user_data] }
