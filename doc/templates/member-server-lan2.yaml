heat_template_version: 2014-10-16
description: An Infoblox Grid Member
parameters:
  mgmt_network:
    type: string
    description: the network for MGMT
  lan1_network:
    type: string
    description: the network for LAN1
  lan2_network:
    type: string
    description: the network for LAN2
  ha_network:
    type: string
    description: the network for the H/A port
  external_network:
    type: string
    description: the external network for floating IP allocations
    default: public
resources:
  host_name:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lowercase

# We pre-allocate the port for LAN1, so that we have the IP address already for
# injection via user_data
  lan1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: lan1_network }

# For MGMT, we do not configure via injection, but we do configure via WAPI
# at the time of member creation, so we want to pre-allocate that port too
  mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: mgmt_network }

# Same goes for LAN2
  lan2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: lan2_network }

# If the GM is outside the cloud, each member needs its own floating IP so that
# they are associated with separate NAT addresses.
# Even if the GM is in the cloud, you may need this if you want Ceilometer to
# poll the member for QPS, and you are not configuring the MGMT port
# Or if you want to actually do DNS from outside the cloud
#  lan1_floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network: { get_param: external_network }
#      port_id: { get_resource: lan1_port }

# Since we want to access the UI and have Ceilometer poll, we need a fip for
# the mgmt port
  #mgmt_floating_ip:
  #  type: OS::Neutron::FloatingIP
  #  properties:
  #    floating_network: { get_param: external_network }
  #    port_id: { get_resource: mgmt_port }

  grid_member:
    type: Infoblox::Grid::Member
    properties:
      name: { list_join: [ '.', [{ list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }, 'localdomain' ]] }
      model: IB-VM-810
      MGMT: { get_resource: mgmt_port }
      LAN1: { get_resource: lan1_port }
      LAN2: { get_resource: lan2_port }
      dns: { enable: True }
      licenses: ["vnios", "dns", "enterprise"]
# If you do not have a license pool and want to use temp licenses instead,
# uncomment the line below
      #temp_licenses: ["vnios", "dns", "enterprise"]
      gm_ip: 10.1.0.2
# To get your GM certificate you can use the following command:
#   echo | openssl s_client -connect gm_ip_address:443 2>/dev/null | openssl x509
#
      gm_certificate: -----BEGIN CERTIFICATE-----MIIDdzCCAl8CEBMfDiW+y7rexP7yMEhM8rEwDQYJKoZIhvcNAQEFBQAwejELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcTCVN1bm55dmFsZTERMA8GA1UEChMISW5mb2Jsb3gxFDASBgNVBAsTC0VuZ2luZWVyaW5nMRkwFwYDVQQDExB3d3cuaW5mb2Jsb3guY29tMB4XDTE1MTAwMjE1MDA1MVoXDTE2MTAwMTE1MDA1MVowejELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcTCVN1bm55dmFsZTERMA8GA1UEChMISW5mb2Jsb3gxFDASBgNVBAsTC0VuZ2luZWVyaW5nMRkwFwYDVQQDExB3d3cuaW5mb2Jsb3guY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA66Oy6w6uTelSTM6EuyRerbGO0yfEpd7qkWt8DyMRxz/xfHBQiAhwdHhhXG30pSHA0Rov/gX6Do6GIAevnCBkZU0srRL2XjtoHhtHpF9qnru233Y1UzceRk+v3ZUk9MakDyIpLQEbtrODTSzzm/M79utfn+dO9GO208y8mzCNCka5wGtIXluFBdGl1jEos92vC/5DZFIyzWWdQjmCW5J0edFMsdtlkG1fVvEowCm3ip3U6lykeg0AXzL/CY4qzuI4gMPI30NjBeBT+78i48S/1m4P3WJxsm1uQfpdy1PjeOpeMJAO0MyIGwTsAvE+/60sbeo2cpcaKmW0ggi1ySX4kwIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQAECTAo/1j+04P59/eT0VWx9q9fy5GfLhAjBTUs5IVZHnEK6CuZc8u1Mug+IZayJiKVwHgqC+0xHT1rqZACmLvRwvW6xV+UYi7ifT9oDJSkmvwGZM0sv0Ehmtg3ph5F+n65PwPI+qbfGjVYdyUBRIlyw2LnUULtf19Ox6tGFI7vBCrXgkLOqAi/HG9WfhBHGeG3ZqCwMa1hoACC47QOqsc514rr+cVPkPhr8GlH7dd8WdyqhR6t+D/w/QuVri5HIfEAV/emhI1MfqKq5EmeBF0FufbHQ1fjHnvU53s4qHYSL5bNvV0Q3PlFmz5hYsHOSYhObLytFUMJqJ/QHhJxfnug-----END CERTIFICATE-----
# If your GM is outside the cloud, you must uncomment the line below so that
# the floating IP is configured in the GM for this member.
      #nat_ip: { get_attr: [ lan1_floating_ip, floating_ip_address ] }
      remote_console_enabled: true
      admin_password: infoblox

  grid_member_ns_group_entry:
    type: Infoblox::Grid::NameServerGroupMember
# Make sure it is created only after the member is created
    depends_on: grid_member
    properties:
# You need to define the group in the GM and list its name here.
      group_name: default
      member_role: grid_secondary
# The name: of the member_server must be the grid member name.
      member_server: { name: { list_join: [ '.', [{ list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }, 'localdomain' ]] } }

  server:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ 'nios', { get_resource: host_name } ]] }
      flavor: vnios810.55
      image: nios-7.2.3-810-55.qcow2
# We need to list the H/A port here because it is eth2 and lan2 is eth3
# I am sticking the H/A port on the same network as LAN2, but normally you wouldn't
      networks: [{port: {get_resource: mgmt_port} }, {port: { get_resource: lan1_port}}, { network: { get_param: ha_network } }, {port: { get_resource: lan2_port }}]
      user_data_format: RAW
      user_data: { get_attr: [grid_member, user_data] }
      metadata: { nios: true }
outputs:
  member_service_address:
    value: { get_attr: [lan1_port, fixed_ips] }
  user_data:
    value: { get_attr: [grid_member, user_data] }
